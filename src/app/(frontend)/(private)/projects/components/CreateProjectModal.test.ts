// ============================================================================
// EIDETIK MVP - TESTS PARA CREATE PROJECT MODAL
// ============================================================================

/**
 * Tests unitarios para la l√≥gica de validaci√≥n del CreateProjectModal
 * 
 * Ejecutar con: tsx src/app/(frontend)/(private)/projects/components/CreateProjectModal.test.ts
 */

// Helper para simular assertions simples
function assert(condition: boolean, message: string) {
  if (!condition) {
    throw new Error(message)
  }
}

console.log('üß™ Ejecutando tests para CreateProjectModal...\n')

// Test 1: Validaci√≥n de t√≠tulo - casos b√°sicos
console.log('1. Test: Validaci√≥n de t√≠tulo - casos b√°sicos')
try {
  // Simular funci√≥n de validaci√≥n del modal
  function validateTitle(value: string, existingProjects: { title: string }[] = []): string {
    if (!value.trim()) {
      return 'El t√≠tulo es requerido'
    }
    
    if (value.trim().length < 3) {
      return 'El t√≠tulo debe tener al menos 3 caracteres'
    }
    
    if (value.trim().length > 100) {
      return 'El t√≠tulo no puede exceder 100 caracteres'
    }
    
    // Verificar unicidad local (b√°sica)
    const titleExists = existingProjects.some(project => 
      project.title.toLowerCase().trim() === value.toLowerCase().trim()
    )
    
    if (titleExists) {
      return 'Ya existe un proyecto con este t√≠tulo'
    }
    
    return ''
  }

  // Test t√≠tulo vac√≠o
  assert(validateTitle('') === 'El t√≠tulo es requerido', 'Debe rechazar t√≠tulo vac√≠o')
  assert(validateTitle('   ') === 'El t√≠tulo es requerido', 'Debe rechazar t√≠tulo solo espacios')

  // Test t√≠tulo muy corto
  assert(validateTitle('a') === 'El t√≠tulo debe tener al menos 3 caracteres', 'Debe rechazar t√≠tulo de 1 car√°cter')
  assert(validateTitle('ab') === 'El t√≠tulo debe tener al menos 3 caracteres', 'Debe rechazar t√≠tulo de 2 caracteres')

  // Test t√≠tulo muy largo
  const longTitle = 'a'.repeat(101)
  assert(validateTitle(longTitle) === 'El t√≠tulo no puede exceder 100 caracteres', 'Debe rechazar t√≠tulo > 100 chars')

  // Test t√≠tulo v√°lido
  assert(validateTitle('Mi Proyecto') === '', 'Debe aceptar t√≠tulo v√°lido')
  assert(validateTitle('   Proyecto con espacios   ') === '', 'Debe aceptar t√≠tulo con espacios')

  console.log('‚úÖ Validaci√≥n de t√≠tulo - casos b√°sicos - PASS\n')
} catch (error) {
  console.log(`‚ùå Validaci√≥n de t√≠tulo - casos b√°sicos - FAIL: ${(error as Error).message}\n`)
}

// Test 2: Validaci√≥n de unicidad de t√≠tulo
console.log('2. Test: Validaci√≥n de unicidad de t√≠tulo')
try {
  function validateTitle(value: string, existingProjects: { title: string }[] = []): string {
    if (!value.trim()) return 'El t√≠tulo es requerido'
    if (value.trim().length < 3) return 'El t√≠tulo debe tener al menos 3 caracteres'
    if (value.trim().length > 100) return 'El t√≠tulo no puede exceder 100 caracteres'
    
    const titleExists = existingProjects.some(project => 
      project.title.toLowerCase().trim() === value.toLowerCase().trim()
    )
    
    if (titleExists) return 'Ya existe un proyecto con este t√≠tulo'
    return ''
  }

  const existingProjects = [
    { title: 'Proyecto Existente' },
    { title: 'Otro Proyecto' },
    { title: 'PROYECTO EN MAY√öSCULAS' },
  ]

  // Test t√≠tulo duplicado exacto
  assert(
    validateTitle('Proyecto Existente', existingProjects) === 'Ya existe un proyecto con este t√≠tulo',
    'Debe rechazar t√≠tulo duplicado exacto'
  )

  // Test t√≠tulo duplicado con diferente case
  assert(
    validateTitle('proyecto existente', existingProjects) === 'Ya existe un proyecto con este t√≠tulo',
    'Debe rechazar t√≠tulo duplicado en min√∫sculas'
  )

  assert(
    validateTitle('PROYECTO EXISTENTE', existingProjects) === 'Ya existe un proyecto con este t√≠tulo',
    'Debe rechazar t√≠tulo duplicado en may√∫sculas'
  )

  // Test t√≠tulo duplicado con espacios
  assert(
    validateTitle('  Proyecto Existente  ', existingProjects) === 'Ya existe un proyecto con este t√≠tulo',
    'Debe rechazar t√≠tulo duplicado con espacios extra'
  )

  // Test t√≠tulo √∫nico
  assert(
    validateTitle('Nuevo Proyecto √önico', existingProjects) === '',
    'Debe aceptar t√≠tulo √∫nico'
  )

  // Test con lista vac√≠a
  assert(
    validateTitle('Cualquier T√≠tulo', []) === '',
    'Debe aceptar cualquier t√≠tulo con lista vac√≠a'
  )

  console.log('‚úÖ Validaci√≥n de unicidad de t√≠tulo - PASS\n')
} catch (error) {
  console.log(`‚ùå Validaci√≥n de unicidad de t√≠tulo - FAIL: ${(error as Error).message}\n`)
}

// Test 3: Validaci√≥n de descripci√≥n
console.log('3. Test: Validaci√≥n de descripci√≥n')
try {
  // La descripci√≥n es opcional, solo validamos longitud m√°xima
  function validateDescription(value: string): string {
    if (value.length > 500) {
      return 'La descripci√≥n no puede exceder 500 caracteres'
    }
    return ''
  }

  // Test descripci√≥n vac√≠a (v√°lida)
  assert(validateDescription('') === '', 'Debe aceptar descripci√≥n vac√≠a')

  // Test descripci√≥n normal
  assert(validateDescription('Esta es una descripci√≥n normal') === '', 'Debe aceptar descripci√≥n normal')

  // Test descripci√≥n muy larga
  const longDescription = 'a'.repeat(501)
  assert(
    validateDescription(longDescription) === 'La descripci√≥n no puede exceder 500 caracteres',
    'Debe rechazar descripci√≥n > 500 chars'
  )

  // Test descripci√≥n en el l√≠mite
  const limitDescription = 'a'.repeat(500)
  assert(validateDescription(limitDescription) === '', 'Debe aceptar descripci√≥n de exactamente 500 chars')

  console.log('‚úÖ Validaci√≥n de descripci√≥n - PASS\n')
} catch (error) {
  console.log(`‚ùå Validaci√≥n de descripci√≥n - FAIL: ${(error as Error).message}\n`)
}

// Test 4: Validaci√≥n de formulario completo
console.log('4. Test: Validaci√≥n de formulario completo')
try {
  interface FormData {
    title: string
    description: string
  }

  function validateForm(data: FormData, existingProjects: { title: string }[] = []): {
    isValid: boolean
    titleError: string
    descriptionError: string
  } {
    const titleError = (() => {
      if (!data.title.trim()) return 'El t√≠tulo es requerido'
      if (data.title.trim().length < 3) return 'El t√≠tulo debe tener al menos 3 caracteres'
      if (data.title.trim().length > 100) return 'El t√≠tulo no puede exceder 100 caracteres'
      
      const titleExists = existingProjects.some(project => 
        project.title.toLowerCase().trim() === data.title.toLowerCase().trim()
      )
      if (titleExists) return 'Ya existe un proyecto con este t√≠tulo'
      return ''
    })()

    const descriptionError = data.description.length > 500 
      ? 'La descripci√≥n no puede exceder 500 caracteres' 
      : ''

    return {
      isValid: !titleError && !descriptionError,
      titleError,
      descriptionError
    }
  }

  const existingProjects = [{ title: 'Proyecto Existente' }]

  // Formulario v√°lido
  const validForm = validateForm({
    title: 'Nuevo Proyecto',
    description: 'Descripci√≥n v√°lida'
  }, existingProjects)

  assert(validForm.isValid === true, 'Formulario v√°lido debe pasar')
  assert(validForm.titleError === '', 'Formulario v√°lido no debe tener error de t√≠tulo')
  assert(validForm.descriptionError === '', 'Formulario v√°lido no debe tener error de descripci√≥n')

  // Formulario con t√≠tulo inv√°lido
  const invalidTitleForm = validateForm({
    title: 'ab', // Muy corto
    description: 'Descripci√≥n v√°lida'
  }, existingProjects)

  assert(invalidTitleForm.isValid === false, 'Formulario con t√≠tulo inv√°lido debe fallar')
  assert(invalidTitleForm.titleError !== '', 'Debe tener error de t√≠tulo')
  assert(invalidTitleForm.descriptionError === '', 'No debe tener error de descripci√≥n')

  // Formulario con t√≠tulo duplicado
  const duplicateTitleForm = validateForm({
    title: 'Proyecto Existente',
    description: 'Descripci√≥n v√°lida'
  }, existingProjects)

  assert(duplicateTitleForm.isValid === false, 'Formulario con t√≠tulo duplicado debe fallar')
  assert(duplicateTitleForm.titleError === 'Ya existe un proyecto con este t√≠tulo', 'Debe tener error de t√≠tulo duplicado')

  // Formulario con descripci√≥n muy larga
  const longDescriptionForm = validateForm({
    title: 'T√≠tulo V√°lido',
    description: 'a'.repeat(501)
  }, existingProjects)

  assert(longDescriptionForm.isValid === false, 'Formulario con descripci√≥n larga debe fallar')
  assert(longDescriptionForm.titleError === '', 'No debe tener error de t√≠tulo')
  assert(longDescriptionForm.descriptionError !== '', 'Debe tener error de descripci√≥n')

  console.log('‚úÖ Validaci√≥n de formulario completo - PASS\n')
} catch (error) {
  console.log(`‚ùå Validaci√≥n de formulario completo - FAIL: ${(error as Error).message}\n`)
}

// Test 5: Preparaci√≥n de datos para env√≠o
console.log('5. Test: Preparaci√≥n de datos para env√≠o')
try {
  interface CreateProjectData {
    title: string
    description?: string
  }

  function prepareProjectData(title: string, description: string): CreateProjectData {
    const data: CreateProjectData = {
      title: title.trim(),
    }

    // Solo incluir descripci√≥n si no est√° vac√≠a
    if (description.trim()) {
      data.description = description.trim()
    }

    return data
  }

  // Test con t√≠tulo y descripci√≥n
  const fullData = prepareProjectData('  Mi Proyecto  ', '  Mi descripci√≥n  ')
  assert(fullData.title === 'Mi Proyecto', 'Debe limpiar espacios del t√≠tulo')
  assert(fullData.description === 'Mi descripci√≥n', 'Debe limpiar espacios de la descripci√≥n')

  // Test solo con t√≠tulo
  const titleOnlyData = prepareProjectData('Mi Proyecto', '')
  assert(titleOnlyData.title === 'Mi Proyecto', 'Debe incluir t√≠tulo')
  assert(titleOnlyData.description === undefined, 'No debe incluir descripci√≥n vac√≠a')

  // Test con descripci√≥n solo espacios
  const spacesDescriptionData = prepareProjectData('Mi Proyecto', '   ')
  assert(spacesDescriptionData.title === 'Mi Proyecto', 'Debe incluir t√≠tulo')
  assert(spacesDescriptionData.description === undefined, 'No debe incluir descripci√≥n solo espacios')

  console.log('‚úÖ Preparaci√≥n de datos para env√≠o - PASS\n')
} catch (error) {
  console.log(`‚ùå Preparaci√≥n de datos para env√≠o - FAIL: ${(error as Error).message}\n`)
}

// Test 6: Estados del modal
console.log('6. Test: Estados del modal')
try {
  interface ModalState {
    isOpen: boolean
    isCreating: boolean
    title: string
    description: string
    titleError: string
  }

  function getModalState(
    isOpen: boolean,
    isCreating: boolean,
    title: string,
    description: string,
    titleError: string
  ): ModalState & { canSubmit: boolean } {
    const state: ModalState = {
      isOpen,
      isCreating,
      title,
      description,
      titleError
    }

    const canSubmit = title.trim().length >= 3 && !titleError && !isCreating

    return { ...state, canSubmit }
  }

  // Estado inicial
  const initialState = getModalState(false, false, '', '', '')
  assert(initialState.canSubmit === false, 'Estado inicial no debe permitir submit')

  // Estado con t√≠tulo v√°lido
  const validState = getModalState(true, false, 'Mi Proyecto', '', '')
  assert(validState.canSubmit === true, 'Estado con t√≠tulo v√°lido debe permitir submit')

  // Estado creando
  const creatingState = getModalState(true, true, 'Mi Proyecto', '', '')
  assert(creatingState.canSubmit === false, 'Estado creando no debe permitir submit')

  // Estado con error
  const errorState = getModalState(true, false, 'Mi Proyecto', '', 'Error de t√≠tulo')
  assert(errorState.canSubmit === false, 'Estado con error no debe permitir submit')

  // Estado con t√≠tulo muy corto
  const shortTitleState = getModalState(true, false, 'ab', '', '')
  assert(shortTitleState.canSubmit === false, 'T√≠tulo muy corto no debe permitir submit')

  console.log('‚úÖ Estados del modal - PASS\n')
} catch (error) {
  console.log(`‚ùå Estados del modal - FAIL: ${(error as Error).message}\n`)
}

console.log('üéâ Tests de CreateProjectModal completados!')
console.log('\nüìä Resumen de tests:')
console.log('- Validaci√≥n de t√≠tulo - casos b√°sicos ‚úÖ')
console.log('- Validaci√≥n de unicidad de t√≠tulo ‚úÖ')
console.log('- Validaci√≥n de descripci√≥n ‚úÖ')
console.log('- Validaci√≥n de formulario completo ‚úÖ')
console.log('- Preparaci√≥n de datos para env√≠o ‚úÖ')
console.log('- Estados del modal ‚úÖ')
console.log('\nüîß Para ejecutar: tsx src/app/(frontend)/(private)/projects/components/CreateProjectModal.test.ts') 