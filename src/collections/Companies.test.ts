// ============================================================================
// TRINOA - TESTS PARA COLECCI√ìN COMPANIES
// ============================================================================

/**
 * Tests de validaci√≥n para la nueva collection Companies
 * 
 * Ejecutar con: tsx src/collections/Companies.test.ts
 */

// Helper para simular assertions simples
function assert(condition: boolean, message: string) {
  if (!condition) {
    throw new Error(message)
  }
}

// Funciones de validaci√≥n extra√≠das del c√≥digo real
function validateCompanyName(value: string | null | undefined) {
  if (!value || typeof value !== 'string' || value.trim().length === 0) {
    return 'El nombre de la empresa es requerido'
  }

  // Validar longitud
  if (value.trim().length < 2) {
    return 'El nombre debe tener al menos 2 caracteres'
  }

  if (value.length > 100) {
    return 'El nombre no puede exceder 100 caracteres'
  }

  return true
}

function validateCompanyCif(value: string | null | undefined) {
  if (!value || typeof value !== 'string' || value.trim().length === 0) {
    return 'El CIF es requerido'
  }

  // Validar formato b√°sico: no vac√≠o, alfanum√©rico
  const cleanCif = value.trim().toUpperCase()
  
  if (cleanCif.length < 9 || cleanCif.length > 20) {
    return 'El CIF debe tener entre 9 y 20 caracteres'
  }

  // Validar que sea alfanum√©rico
  if (!/^[A-Z0-9]+$/.test(cleanCif)) {
    return 'El CIF debe contener solo letras y n√∫meros'
  }

  return true
}

function normalizeCif(value: string | null | undefined) {
  if (value && typeof value === 'string') {
    return value.trim().toUpperCase()
  }
  return value
}

// Tests simples sin dependencias
console.log('üß™ Ejecutando tests para Companies Collection...\n')

// Test 1: Validaci√≥n de nombre requerido
console.log('1. Test: Validaci√≥n de nombre requerido')
try {
  assert(validateCompanyName('') === 'El nombre de la empresa es requerido', 'Debe rechazar string vac√≠o')
  assert(validateCompanyName(null) === 'El nombre de la empresa es requerido', 'Debe rechazar null')
  assert(validateCompanyName(undefined) === 'El nombre de la empresa es requerido', 'Debe rechazar undefined')
  assert(validateCompanyName('   ') === 'El nombre de la empresa es requerido', 'Debe rechazar espacios en blanco')
  console.log('‚úÖ Validaci√≥n de nombre requerido - PASS\n')
} catch (error) {
  console.log(`‚ùå Validaci√≥n de nombre requerido - FAIL: ${(error as Error).message}\n`)
}

// Test 2: Validaci√≥n de longitud de nombre
console.log('2. Test: Validaci√≥n de longitud de nombre')
try {
  const shortName = 'A'
  const longName = 'a'.repeat(101)
  const validName = 'Tecnolog√≠as Avanzadas S.L.'
  const maxLengthName = 'a'.repeat(100)
  const minLengthName = 'AB'
  
  assert(validateCompanyName(shortName) === 'El nombre debe tener al menos 2 caracteres', 'Debe rechazar nombres < 2 caracteres')
  assert(validateCompanyName(longName) === 'El nombre no puede exceder 100 caracteres', 'Debe rechazar nombres > 100 caracteres')
  assert(validateCompanyName(validName) === true, 'Debe aceptar nombres v√°lidos')
  assert(validateCompanyName(maxLengthName) === true, 'Debe aceptar nombres de exactamente 100 caracteres')
  assert(validateCompanyName(minLengthName) === true, 'Debe aceptar nombres de exactamente 2 caracteres')
  console.log('‚úÖ Validaci√≥n de longitud de nombre - PASS\n')
} catch (error) {
  console.log(`‚ùå Validaci√≥n de longitud de nombre - FAIL: ${(error as Error).message}\n`)
}

// Test 3: Validaci√≥n de CIF requerido
console.log('3. Test: Validaci√≥n de CIF requerido')
try {
  assert(validateCompanyCif('') === 'El CIF es requerido', 'Debe rechazar string vac√≠o')
  assert(validateCompanyCif(null) === 'El CIF es requerido', 'Debe rechazar null')
  assert(validateCompanyCif(undefined) === 'El CIF es requerido', 'Debe rechazar undefined')
  assert(validateCompanyCif('   ') === 'El CIF es requerido', 'Debe rechazar espacios en blanco')
  console.log('‚úÖ Validaci√≥n de CIF requerido - PASS\n')
} catch (error) {
  console.log(`‚ùå Validaci√≥n de CIF requerido - FAIL: ${(error as Error).message}\n`)
}

// Test 4: Validaci√≥n de formato de CIF
console.log('4. Test: Validaci√≥n de formato de CIF')
try {
  const shortCif = '12345678'  // 8 caracteres, muy corto
  const longCif = 'A'.repeat(21)  // 21 caracteres, muy largo
  const invalidChars = 'A12345678@'  // Contiene caracteres especiales
  const validCif1 = 'A12345678'  // 9 caracteres v√°lidos
  const validCif2 = 'B98765432X'  // 10 caracteres v√°lidos
  const validCif3 = '12345678Z'  // Formato NIF v√°lido
  const maxLengthCif = 'A'.repeat(20)  // 20 caracteres, l√≠mite m√°ximo
  
  assert(validateCompanyCif(shortCif) === 'El CIF debe tener entre 9 y 20 caracteres', 'Debe rechazar CIF < 9 caracteres')
  assert(validateCompanyCif(longCif) === 'El CIF debe tener entre 9 y 20 caracteres', 'Debe rechazar CIF > 20 caracteres')
  assert(validateCompanyCif(invalidChars) === 'El CIF debe contener solo letras y n√∫meros', 'Debe rechazar caracteres especiales')
  assert(validateCompanyCif(validCif1) === true, 'Debe aceptar CIF v√°lido de 9 caracteres')
  assert(validateCompanyCif(validCif2) === true, 'Debe aceptar CIF v√°lido de 10 caracteres')
  assert(validateCompanyCif(validCif3) === true, 'Debe aceptar formato NIF v√°lido')
  assert(validateCompanyCif(maxLengthCif) === true, 'Debe aceptar CIF de exactamente 20 caracteres')
  console.log('‚úÖ Validaci√≥n de formato de CIF - PASS\n')
} catch (error) {
  console.log(`‚ùå Validaci√≥n de formato de CIF - FAIL: ${(error as Error).message}\n`)
}

// Test 5: Normalizaci√≥n de CIF
console.log('5. Test: Normalizaci√≥n de CIF')
try {
  const lowercaseCif = 'a12345678'
  const mixedCaseCif = 'B98765432x'
  const withSpacesCif = '  A12345678  '
  const validCif = 'A12345678'
  
  assert(normalizeCif(lowercaseCif) === 'A12345678', 'Debe convertir min√∫sculas a may√∫sculas')
  assert(normalizeCif(mixedCaseCif) === 'B98765432X', 'Debe normalizar casos mixtos')
  assert(normalizeCif(withSpacesCif) === 'A12345678', 'Debe eliminar espacios')
  assert(normalizeCif(validCif) === 'A12345678', 'Debe mantener CIF ya normalizado')
  assert(normalizeCif(null) === null, 'Debe manejar null')
  assert(normalizeCif(undefined) === undefined, 'Debe manejar undefined')
  assert(normalizeCif('') === '', 'Debe manejar string vac√≠o')
  
  console.log('‚úÖ Normalizaci√≥n de CIF - PASS\n')
} catch (error) {
  console.log(`‚ùå Normalizaci√≥n de CIF - FAIL: ${(error as Error).message}\n`)
}

// Test 6: Estructura de campos de Company
console.log('6. Test: Estructura de campos de Company')
try {
  const mockCompany = {
    name: 'Tecnolog√≠as Avanzadas S.L.',
    cif: 'A12345678',
    createdAt: new Date(),
    updatedAt: new Date()
  }
  
  assert('name' in mockCompany, 'Company debe tener campo name')
  assert('cif' in mockCompany, 'Company debe tener campo cif')
  assert('createdAt' in mockCompany, 'Company debe tener campo createdAt')
  assert('updatedAt' in mockCompany, 'Company debe tener campo updatedAt')
  
  assert(typeof mockCompany.name === 'string', 'name debe ser string')
  assert(typeof mockCompany.cif === 'string', 'cif debe ser string')
  assert(mockCompany.createdAt instanceof Date, 'createdAt debe ser Date')
  assert(mockCompany.updatedAt instanceof Date, 'updatedAt debe ser Date')
  
  console.log('‚úÖ Estructura de campos de Company - PASS\n')
} catch (error) {
  console.log(`‚ùå Estructura de campos de Company - FAIL: ${(error as Error).message}\n`)
}

// Test 7: Simulaci√≥n de reglas de acceso
console.log('7. Test: Simulaci√≥n de reglas de acceso')
try {
  // Simular diferentes tipos de usuario
  const adminUser = { id: 'admin-1', role: 'admin' }
  const normalUser = { id: 'user-1', role: 'user' }
  const apiUser = { id: 'api-1', role: 'api' }
  
  // Simular funci√≥n de acceso read
  function canRead(user: any) {
    if (!user) return false
    if (!user.id) return false
    // Todos los usuarios autenticados pueden leer empresas (para selectors)
    return user.role === 'admin' || user.role === 'user' || user.role === 'api'
  }
  
  // Simular funci√≥n de acceso create
  function canCreate(user: any) {
    if (!user) return false
    if (!user.id) return false
    // Solo admins pueden crear empresas
    return user.role === 'admin'
  }
  
  // Simular funci√≥n de acceso update
  function canUpdate(user: any) {
    if (!user) return false
    if (!user.id) return false
    // Solo admins pueden editar empresas
    return user.role === 'admin'
  }
  
  // Simular funci√≥n de acceso delete
  function canDelete(user: any) {
    if (!user) return false
    if (!user.id) return false
    // Solo admins pueden eliminar empresas
    return user.role === 'admin'
  }
  
  // Tests de acceso read
  assert(canRead(adminUser) === true, 'Admin debe poder leer empresas')
  assert(canRead(normalUser) === true, 'Usuario normal debe poder leer empresas')
  assert(canRead(apiUser) === true, 'Usuario API debe poder leer empresas')
  assert(canRead(null) === false, 'Usuario no autenticado no debe poder leer')
  assert(canRead({ role: 'admin' }) === false, 'Usuario sin ID no debe poder leer')
  
  // Tests de acceso create
  assert(canCreate(adminUser) === true, 'Admin debe poder crear empresas')
  assert(canCreate(normalUser) === false, 'Usuario normal NO debe poder crear empresas')
  assert(canCreate(apiUser) === false, 'Usuario API NO debe poder crear empresas')
  assert(canCreate(null) === false, 'Usuario no autenticado no debe poder crear')
  
  // Tests de acceso update
  assert(canUpdate(adminUser) === true, 'Admin debe poder editar empresas')
  assert(canUpdate(normalUser) === false, 'Usuario normal NO debe poder editar empresas')
  assert(canUpdate(apiUser) === false, 'Usuario API NO debe poder editar empresas')
  assert(canUpdate(null) === false, 'Usuario no autenticado no debe poder editar')
  
  // Tests de acceso delete
  assert(canDelete(adminUser) === true, 'Admin debe poder eliminar empresas')
  assert(canDelete(normalUser) === false, 'Usuario normal NO debe poder eliminar empresas')
  assert(canDelete(apiUser) === false, 'Usuario API NO debe poder eliminar empresas')
  assert(canDelete(null) === false, 'Usuario no autenticado no debe poder eliminar')
  
  console.log('‚úÖ Simulaci√≥n de reglas de acceso - PASS\n')
} catch (error) {
  console.log(`‚ùå Simulaci√≥n de reglas de acceso - FAIL: ${(error as Error).message}\n`)
}

// Test 8: Simulaci√≥n de hooks beforeChange
console.log('8. Test: Simulaci√≥n de hooks beforeChange')
try {
  interface TestCompanyData {
    name: string
    cif: string
    createdAt?: Date
    updatedAt?: Date
  }
  
  const operation = 'create'
  const data: TestCompanyData = {
    name: 'Nueva Empresa S.L.',
    cif: 'a12345678'  // CIF en min√∫sculas para probar normalizaci√≥n
  }
  
  // L√≥gica del hook CIF (simulando beforeChange)
  if (data.cif) {
    data.cif = normalizeCif(data.cif) as string
  }
  
  // L√≥gica del hook createdAt (simulando beforeChange)
  if (operation === 'create') {
    data.createdAt = new Date()
  }
  
  // L√≥gica del hook updatedAt (simulando beforeChange)
  data.updatedAt = new Date()
  
  assert(data.cif === 'A12345678', 'CIF debe normalizarse a may√∫sculas')
  assert(data.createdAt instanceof Date, 'createdAt debe auto-populate con fecha actual')
  assert(data.updatedAt instanceof Date, 'updatedAt debe auto-populate con fecha actual')
  
  console.log('‚úÖ Simulaci√≥n de hooks beforeChange - PASS\n')
} catch (error) {
  console.log(`‚ùå Simulaci√≥n de hooks beforeChange - FAIL: ${(error as Error).message}\n`)
}

// Test 9: Simulaci√≥n de validaci√≥n de duplicados
console.log('9. Test: Simulaci√≥n de validaci√≥n de duplicados')
try {
  // Simular base de datos de empresas existentes
  const existingCompanies = [
    { id: '1', name: 'Empresa Uno S.L.', cif: 'A11111111' },
    { id: '2', name: 'Empresa Dos S.A.', cif: 'B22222222' },
    { id: '3', name: 'Empresa Tres S.L.', cif: 'A33333333' }
  ]
  
  // Simular funci√≥n de validaci√≥n de duplicados por nombre
  function validateNameUniqueness(name: string, currentId?: string) {
    const existing = existingCompanies.find(company => 
      company.name === name && company.id !== currentId
    )
    return !existing
  }
  
  // Simular funci√≥n de validaci√≥n de duplicados por CIF
  function validateCifUniqueness(cif: string, currentId?: string) {
    const existing = existingCompanies.find(company => 
      company.cif === cif && company.id !== currentId
    )
    return !existing
  }
  
  // Tests de nombres √∫nicos
  assert(validateNameUniqueness('Empresa Nueva S.L.') === true, 'Debe permitir nombre nuevo')
  assert(validateNameUniqueness('Empresa Uno S.L.') === false, 'Debe rechazar nombre duplicado')
  assert(validateNameUniqueness('Empresa Uno S.L.', '1') === true, 'Debe permitir mismo nombre en update del mismo documento')
  
  // Tests de CIF √∫nicos
  assert(validateCifUniqueness('A44444444') === true, 'Debe permitir CIF nuevo')
  assert(validateCifUniqueness('A11111111') === false, 'Debe rechazar CIF duplicado')
  assert(validateCifUniqueness('A11111111', '1') === true, 'Debe permitir mismo CIF en update del mismo documento')
  
  console.log('‚úÖ Simulaci√≥n de validaci√≥n de duplicados - PASS\n')
} catch (error) {
  console.log(`‚ùå Simulaci√≥n de validaci√≥n de duplicados - FAIL: ${(error as Error).message}\n`)
}

// Test 10: Simulaci√≥n de configuraci√≥n admin
console.log('10. Test: Simulaci√≥n de configuraci√≥n admin')
try {
  const mockAdminConfig = {
    useAsTitle: 'name',
    defaultColumns: ['name', 'cif', 'createdAt'],
    listSearchableFields: ['name', 'cif'],
    description: 'Gestiona empresas del sistema para asignaci√≥n a usuarios'
  }
  
  assert(mockAdminConfig.useAsTitle === 'name', 'Debe usar nombre como t√≠tulo')
  assert(Array.isArray(mockAdminConfig.defaultColumns), 'defaultColumns debe ser array')
  assert(mockAdminConfig.defaultColumns.includes('name'), 'Debe incluir name en columnas por defecto')
  assert(mockAdminConfig.defaultColumns.includes('cif'), 'Debe incluir cif en columnas por defecto')
  assert(mockAdminConfig.defaultColumns.includes('createdAt'), 'Debe incluir createdAt en columnas por defecto')
  assert(Array.isArray(mockAdminConfig.listSearchableFields), 'listSearchableFields debe ser array')
  assert(mockAdminConfig.listSearchableFields.includes('name'), 'Debe permitir b√∫squeda por nombre')
  assert(mockAdminConfig.listSearchableFields.includes('cif'), 'Debe permitir b√∫squeda por CIF')
  assert(typeof mockAdminConfig.description === 'string', 'Debe tener descripci√≥n como string')
  
  console.log('‚úÖ Simulaci√≥n de configuraci√≥n admin - PASS\n')
} catch (error) {
  console.log(`‚ùå Simulaci√≥n de configuraci√≥n admin - FAIL: ${(error as Error).message}\n`)
}

// Test 11: Casos edge de validaci√≥n
console.log('11. Test: Casos edge de validaci√≥n')
try {
  // Casos edge para nombre
  const nameWithSpecialChars = 'Empresa & Asociados S.L.'
  const nameWithNumbers = 'Tech Solutions 2024 S.L.'
  const nameWithAccents = 'Soluciones T√©cnicas S.L.'
  
  assert(validateCompanyName(nameWithSpecialChars) === true, 'Debe permitir caracteres especiales en nombre')
  assert(validateCompanyName(nameWithNumbers) === true, 'Debe permitir n√∫meros en nombre')
  assert(validateCompanyName(nameWithAccents) === true, 'Debe permitir acentos en nombre')
  
  // Casos edge para CIF
  const cifAllNumbers = '123456789'
  const cifAllLetters = 'ABCDEFGHI'
  const cifMixed = 'A123B456C'
  
  assert(validateCompanyCif(cifAllNumbers) === true, 'Debe permitir CIF solo con n√∫meros')
  assert(validateCompanyCif(cifAllLetters) === true, 'Debe permitir CIF solo con letras')
  assert(validateCompanyCif(cifMixed) === true, 'Debe permitir CIF mixto')
  
  // Normalizaci√≥n de casos edge
  const cifWithSpacesAndLower = '  a123b456c  '
  assert(normalizeCif(cifWithSpacesAndLower) === 'A123B456C', 'Debe normalizar casos complejos')
  
  console.log('‚úÖ Casos edge de validaci√≥n - PASS\n')
} catch (error) {
  console.log(`‚ùå Casos edge de validaci√≥n - FAIL: ${(error as Error).message}\n`)
}

console.log('üéâ Tests de Companies Collection completados!')
console.log('\nüìä Resumen:')
console.log('- Validaci√≥n de campos requeridos (name, cif) ‚úÖ')
console.log('- Validaci√≥n de formato y l√≠mites ‚úÖ')
console.log('- Normalizaci√≥n autom√°tica de CIF ‚úÖ')
console.log('- Reglas de acceso por rol (solo admins crean/editan) ‚úÖ')
console.log('- Hooks de auto-population de fechas ‚úÖ')
console.log('- Validaci√≥n de duplicados (name y cif √∫nicos) ‚úÖ')
console.log('- Configuraci√≥n admin apropiada ‚úÖ')
console.log('- Manejo de casos edge ‚úÖ')
console.log('\nüîß Para ejecutar: npx tsx src/collections/Companies.test.ts')
