// ============================================================================
// EIDETIK MVP - TESTS PARA COLECCI√ìN PROJECTS
// ============================================================================

/**
 * Tests de validaci√≥n para la nueva collection Projects
 * 
 * Ejecutar con: tsx src/collections/Projects.test.ts
 */

// Helper para simular assertions simples
function assert(condition: boolean, message: string) {
  if (!condition) {
    throw new Error(message)
  }
}

// Funciones de validaci√≥n extra√≠das del c√≥digo real
function validateTitle(value: string | null | undefined) {
  if (!value || typeof value !== 'string' || value.trim().length === 0) {
    return 'El t√≠tulo es requerido'
  }
  if (value.length > 100) {
    return 'El t√≠tulo no puede exceder 100 caracteres'
  }
  return true
}

function validateSlug(value: string | null | undefined) {
  if (!value || typeof value !== 'string' || value.trim().length === 0) {
    return 'El slug es requerido'
  }
  if (!/^[a-z0-9-]+$/.test(value)) {
    return 'El slug debe contener solo letras min√∫sculas, n√∫meros y guiones'
  }
  return true
}

function generateSlug(title: string): string {
  const baseSlug = title
    .toLowerCase()
    .replace(/[^a-z0-9\s-]/g, '') // Remover caracteres especiales
    .replace(/\s+/g, '-') // Reemplazar espacios con guiones
    .replace(/-+/g, '-') // Reemplazar m√∫ltiples guiones con uno solo
    .replace(/^-+|-+$/g, '') // Remover guiones al inicio y final
    .trim()
    .substring(0, 45) // Limitar longitud para dejar espacio al sufijo

  if (!baseSlug) {
    return 'proyecto-sin-titulo'
  }

  // A√±adir sufijo aleatorio para garantizar unicidad
  const randomSuffix = Math.random().toString(36).substring(2, 8)
  return `${baseSlug}-${randomSuffix}`
}

function validateDescription(value: any) {
  // Validar longitud del contenido de texto si existe
  if (value && Array.isArray(value)) {
    const textContent = value
      .map((node: any) => {
        if (node.type === 'paragraph' && node.children) {
          return node.children.map((child: any) => child.text || '').join('')
        }
        return ''
      })
      .join('')
    
    if (textContent.length > 1000) {
      return 'La descripci√≥n no puede exceder 1000 caracteres'
    }
  }
  return true
}

// Tests simples sin dependencias
console.log('üß™ Ejecutando tests para Projects Collection...\n')

// Test 1: Validaci√≥n de t√≠tulo requerido
console.log('1. Test: Validaci√≥n de t√≠tulo requerido')
try {
  assert(validateTitle('') === 'El t√≠tulo es requerido', 'Debe rechazar string vac√≠o')
  assert(validateTitle(null) === 'El t√≠tulo es requerido', 'Debe rechazar null')
  assert(validateTitle(undefined) === 'El t√≠tulo es requerido', 'Debe rechazar undefined')
  assert(validateTitle('   ') === 'El t√≠tulo es requerido', 'Debe rechazar espacios en blanco')
  console.log('‚úÖ Validaci√≥n de t√≠tulo requerido - PASS\n')
} catch (error) {
  console.log(`‚ùå Validaci√≥n de t√≠tulo requerido - FAIL: ${(error as Error).message}\n`)
}

// Test 2: Validaci√≥n de longitud de t√≠tulo
console.log('2. Test: Validaci√≥n de longitud de t√≠tulo')
try {
  const longTitle = 'a'.repeat(101)
  const validTitle = 'Mi Proyecto Genial'
  const maxLengthTitle = 'a'.repeat(100)
  
  assert(validateTitle(longTitle) === 'El t√≠tulo no puede exceder 100 caracteres', 'Debe rechazar t√≠tulos > 100 caracteres')
  assert(validateTitle(validTitle) === true, 'Debe aceptar t√≠tulos v√°lidos')
  assert(validateTitle(maxLengthTitle) === true, 'Debe aceptar t√≠tulos de exactamente 100 caracteres')
  console.log('‚úÖ Validaci√≥n de longitud de t√≠tulo - PASS\n')
} catch (error) {
  console.log(`‚ùå Validaci√≥n de longitud de t√≠tulo - FAIL: ${(error as Error).message}\n`)
}

// Test 3: Validaci√≥n de slug requerido
console.log('3. Test: Validaci√≥n de slug requerido')
try {
  assert(validateSlug('') === 'El slug es requerido', 'Debe rechazar string vac√≠o')
  assert(validateSlug(null) === 'El slug es requerido', 'Debe rechazar null')
  assert(validateSlug(undefined) === 'El slug es requerido', 'Debe rechazar undefined')
  assert(validateSlug('   ') === 'El slug es requerido', 'Debe rechazar espacios en blanco')
  console.log('‚úÖ Validaci√≥n de slug requerido - PASS\n')
} catch (error) {
  console.log(`‚ùå Validaci√≥n de slug requerido - FAIL: ${(error as Error).message}\n`)
}

// Test 4: Validaci√≥n de formato de slug
console.log('4. Test: Validaci√≥n de formato de slug')
try {
  const invalidMessage = 'El slug debe contener solo letras min√∫sculas, n√∫meros y guiones'
  assert(validateSlug('Invalid@Slug') === invalidMessage, 'Debe rechazar may√∫sculas y caracteres especiales')
  assert(validateSlug('invalid slug') === invalidMessage, 'Debe rechazar espacios')
  assert(validateSlug('invalid.slug') === invalidMessage, 'Debe rechazar puntos')
  assert(validateSlug('invalid_slug') === invalidMessage, 'Debe rechazar underscores')
  assert(validateSlug('INVALID-SLUG') === invalidMessage, 'Debe rechazar may√∫sculas')
  
  // Slugs v√°lidos
  assert(validateSlug('valid-slug') === true, 'Debe aceptar slug v√°lido con guiones')
  assert(validateSlug('validslug123') === true, 'Debe aceptar slug alfanum√©rico')
  assert(validateSlug('proyecto-123') === true, 'Debe aceptar combinaci√≥n v√°lida')
  console.log('‚úÖ Validaci√≥n de formato de slug - PASS\n')
} catch (error) {
  console.log(`‚ùå Validaci√≥n de formato de slug - FAIL: ${(error as Error).message}\n`)
}

// Test 5: Auto-generaci√≥n de slug desde t√≠tulo
console.log('5. Test: Auto-generaci√≥n de slug desde t√≠tulo')
try {
  const slug1 = generateSlug('Mi Proyecto Genial!')
  const slug2 = generateSlug('An√°lisis de Datos 2024')
  const slug3 = generateSlug('Proyecto con @#$% caracteres especiales')
  const slug4 = generateSlug('')
  const slug5 = generateSlug('   ')
  
  // Verificar que se generen slugs v√°lidos
  assert(validateSlug(slug1) === true, 'Slug generado desde "Mi Proyecto Genial!" debe ser v√°lido')
  assert(validateSlug(slug2) === true, 'Slug generado desde "An√°lisis de Datos 2024" debe ser v√°lido')
  assert(validateSlug(slug3) === true, 'Slug generado con caracteres especiales debe ser v√°lido')
  assert(slug4 === 'proyecto-sin-titulo', 'T√≠tulo vac√≠o debe generar "proyecto-sin-titulo"')
  assert(slug5 === 'proyecto-sin-titulo', 'T√≠tulo con espacios debe generar "proyecto-sin-titulo"')
  
  // Verificar que contengan elementos esperados (sin el sufijo aleatorio)
  assert(slug1.includes('mi-proyecto-genial'), 'Debe contener versi√≥n limpia del t√≠tulo')
  assert(slug2.includes('analisis-de-datos-2024'), 'Debe manejar acentos y n√∫meros')
  assert(slug3.includes('proyecto-con-caracteres-especiales'), 'Debe limpiar caracteres especiales')
  
  // Verificar que tengan sufijo aleatorio
  assert(slug1.split('-').length >= 4, 'Debe tener sufijo aleatorio a√±adido')
  assert(slug2.split('-').length >= 5, 'Debe tener sufijo aleatorio a√±adido')
  
  console.log('‚úÖ Auto-generaci√≥n de slug - PASS\n')
} catch (error) {
  console.log(`‚ùå Auto-generaci√≥n de slug - FAIL: ${(error as Error).message}\n`)
}

// Test 6: Validaci√≥n de descripci√≥n richText
console.log('6. Test: Validaci√≥n de descripci√≥n richText')
try {
  // Descripci√≥n v√°lida
  const validDescription = [
    {
      type: 'paragraph',
      children: [
        { text: 'Esta es una descripci√≥n v√°lida del proyecto.' }
      ]
    }
  ]
  
  // Descripci√≥n muy larga
  const longText = 'a'.repeat(1001)
  const longDescription = [
    {
      type: 'paragraph',
      children: [
        { text: longText }
      ]
    }
  ]
  
  // Descripci√≥n vac√≠a
  const emptyDescription: any[] = []
  
  assert(validateDescription(validDescription) === true, 'Debe aceptar descripci√≥n v√°lida')
  assert(validateDescription(longDescription) === 'La descripci√≥n no puede exceder 1000 caracteres', 'Debe rechazar descripci√≥n muy larga')
  assert(validateDescription(emptyDescription) === true, 'Debe aceptar descripci√≥n vac√≠a')
  assert(validateDescription(null) === true, 'Debe aceptar descripci√≥n null')
  assert(validateDescription(undefined) === true, 'Debe aceptar descripci√≥n undefined')
  
  console.log('‚úÖ Validaci√≥n de descripci√≥n richText - PASS\n')
} catch (error) {
  console.log(`‚ùå Validaci√≥n de descripci√≥n richText - FAIL: ${(error as Error).message}\n`)
}

// Test 7: Estructura de campos del proyecto
console.log('7. Test: Estructura de campos del proyecto')
try {
  const mockProject = {
    title: 'Proyecto de Prueba',
    slug: 'proyecto-de-prueba-abc123',
    description: [
      {
        type: 'paragraph',
        children: [
          { text: 'Descripci√≥n del proyecto de prueba' }
        ]
      }
    ],
    createdBy: 'user-id-123',
    createdAt: new Date(),
    updatedAt: new Date()
  }
  
  assert('title' in mockProject, 'Proyecto debe tener campo title')
  assert('slug' in mockProject, 'Proyecto debe tener campo slug')
  assert('description' in mockProject, 'Proyecto debe tener campo description')
  assert('createdBy' in mockProject, 'Proyecto debe tener campo createdBy')
  assert('createdAt' in mockProject, 'Proyecto debe tener campo createdAt')
  assert('updatedAt' in mockProject, 'Proyecto debe tener campo updatedAt')
  
  assert(typeof mockProject.title === 'string', 'title debe ser string')
  assert(typeof mockProject.slug === 'string', 'slug debe ser string')
  assert(Array.isArray(mockProject.description), 'description debe ser array (richText)')
  assert(typeof mockProject.createdBy === 'string', 'createdBy debe ser string')
  assert(mockProject.createdAt instanceof Date, 'createdAt debe ser Date')
  assert(mockProject.updatedAt instanceof Date, 'updatedAt debe ser Date')
  
  console.log('‚úÖ Estructura de campos del proyecto - PASS\n')
} catch (error) {
  console.log(`‚ùå Estructura de campos del proyecto - FAIL: ${(error as Error).message}\n`)
}

// Test 8: Simulaci√≥n de hooks beforeChange
console.log('8. Test: Simulaci√≥n de hooks beforeChange')
try {
  // Simular hook para auto-populate createdBy
  interface TestProjectData {
    title: string
    description?: any
    createdBy?: string
    createdAt?: Date
    updatedAt?: Date
  }
  
  const operation = 'create'
  const mockUser = { id: 'user-123' }
  const data: TestProjectData = {
    title: 'Nuevo Proyecto'
  }
  
  // L√≥gica del hook createdBy (simulando beforeChange)
  if (operation === 'create' && mockUser) {
    data.createdBy = mockUser.id
  }
  
  // L√≥gica del hook createdAt (simulando beforeChange)
  if (operation === 'create') {
    data.createdAt = new Date()
  }
  
  // L√≥gica del hook updatedAt (simulando beforeChange)
  data.updatedAt = new Date()
  
  assert(data.createdBy === 'user-123', 'createdBy debe auto-populate con user ID')
  assert(data.createdAt instanceof Date, 'createdAt debe auto-populate con fecha actual')
  assert(data.updatedAt instanceof Date, 'updatedAt debe auto-populate con fecha actual')
  
  console.log('‚úÖ Simulaci√≥n de hooks beforeChange - PASS\n')
} catch (error) {
  console.log(`‚ùå Simulaci√≥n de hooks beforeChange - FAIL: ${(error as Error).message}\n`)
}

// Test 9: Simulaci√≥n de reglas de acceso
console.log('9. Test: Simulaci√≥n de reglas de acceso')
try {
  // Simular diferentes tipos de usuario
  const adminUser = { id: 'admin-1', role: 'admin' }
  const normalUser = { id: 'user-1', role: 'user' }
  const apiUser = { id: 'api-1', role: 'api' }
  
  // Simular funci√≥n de acceso read
  function canRead(user: any) {
    if (!user) return false
    if (user.role === 'admin') return true
    // Para usuarios normales y API, solo sus propios proyectos
    return { createdBy: { equals: user.id } }
  }
  
  // Simular funci√≥n de acceso create
  function canCreate(user: any) {
    if (!user) return false
    return user.role === 'admin' || user.role === 'user'
  }
  
  // Simular funci√≥n de acceso delete
  function canDelete(user: any) {
    if (!user) return false
    if (user.role === 'admin') return true
    if (user.role === 'user') {
      return { createdBy: { equals: user.id } }
    }
    // Los usuarios API no pueden eliminar proyectos
    return false
  }
  
  // Tests de acceso read
  assert(canRead(adminUser) === true, 'Admin debe poder leer todos los proyectos')
  assert(typeof canRead(normalUser) === 'object', 'Usuario normal debe tener filtro de ownership')
  assert(typeof canRead(apiUser) === 'object', 'Usuario API debe tener filtro de ownership')
  assert(canRead(null) === false, 'Usuario no autenticado no debe poder leer')
  
  // Tests de acceso create
  assert(canCreate(adminUser) === true, 'Admin debe poder crear proyectos')
  assert(canCreate(normalUser) === true, 'Usuario normal debe poder crear proyectos')
  assert(canCreate(apiUser) === false, 'Usuario API no debe poder crear proyectos')
  assert(canCreate(null) === false, 'Usuario no autenticado no debe poder crear')
  
  // Tests de acceso delete
  assert(canDelete(adminUser) === true, 'Admin debe poder eliminar todos los proyectos')
  assert(typeof canDelete(normalUser) === 'object', 'Usuario normal debe poder eliminar solo sus proyectos')
  assert(canDelete(apiUser) === false, 'Usuario API no debe poder eliminar proyectos')
  assert(canDelete(null) === false, 'Usuario no autenticado no debe poder eliminar')
  
  console.log('‚úÖ Simulaci√≥n de reglas de acceso - PASS\n')
} catch (error) {
  console.log(`‚ùå Simulaci√≥n de reglas de acceso - FAIL: ${(error as Error).message}\n`)
}

// Test 10: Validaci√≥n de relaciones
console.log('10. Test: Validaci√≥n de relaciones')
try {
  // Simular proyecto con relaciones
  const projectWithRelations = {
    id: 'project-123',
    title: 'Proyecto con Relaciones',
    slug: 'proyecto-con-relaciones-abc123',
    createdBy: {
      id: 'user-123',
      email: 'usuario@ejemplo.com',
      name: 'Usuario Ejemplo'
    },
    // Simular resources que pertenecen a este proyecto
    resources: [
      {
        id: 'resource-1',
        title: 'Video 1',
        type: 'video',
        project: 'project-123'
      },
      {
        id: 'resource-2',
        title: 'Video 2',
        type: 'video',
        project: 'project-123'
      }
    ]
  }
  
  assert('createdBy' in projectWithRelations, 'Proyecto debe tener relaci√≥n createdBy')
  assert('resources' in projectWithRelations, 'Proyecto debe poder tener resources relacionados')
  assert(typeof projectWithRelations.createdBy === 'object', 'createdBy debe ser objeto poblado')
  assert(Array.isArray(projectWithRelations.resources), 'resources debe ser array')
  assert(projectWithRelations.resources.length === 2, 'Debe tener 2 resources relacionados')
  assert(projectWithRelations.resources[0].project === projectWithRelations.id, 'Resource debe referenciar al proyecto')
  
  console.log('‚úÖ Validaci√≥n de relaciones - PASS\n')
} catch (error) {
  console.log(`‚ùå Validaci√≥n de relaciones - FAIL: ${(error as Error).message}\n`)
}

console.log('üéâ Tests de Projects Collection completados!')
console.log('\nüìä Resumen:')
console.log('- Validaci√≥n de campos requeridos ‚úÖ')
console.log('- Validaci√≥n de formatos y l√≠mites ‚úÖ')
console.log('- Auto-generaci√≥n de slug ‚úÖ')
console.log('- Hooks de auto-population ‚úÖ')
console.log('- Reglas de acceso por rol ‚úÖ')
console.log('- Estructura de relaciones ‚úÖ')
console.log('\nüîß Para ejecutar: tsx src/collections/Projects.test.ts') 